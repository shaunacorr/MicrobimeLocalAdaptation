#Load the packages/libraries required
library("qiime2R")
library("vegan")
library("ggplot2")
library("phyloseq")
library("microbiome")
library("dplyr")
library("tidyr")
library("viridis")
library("car")
library("ggsignif")
library("multcomp")
library("grid")
####Import data####
pseq_with_blanks <- qiime2R::qza_to_phyloseq(
features = "table-with-phylum.qza",
tree = "rooted-tree.qza",
taxonomy = "taxonomy.sklearn.qza",
metadata = "Metadata.txt"
)
#Filter out blank samples
sample_data(pseq_with_blanks)
pseq <- subset_samples(pseq_with_blanks, Rep != "Blank")
#Extract ASV table as data frame
asv_abund_df <- as.data.frame(t(phyloseq::otu_table(pseq)))
# Minimum sample count to be rarefied
raremax <- min(microbiome::readcount(pseq))
# Define colors for the plot
col <- c("darkred", "forestgreen", "hotpink", "blue", "orange", "black")
set.seed(3)
grp <- factor(sample(seq_along(col), nrow(asv_abund_df), replace = TRUE))
cols <- col[grp]
# Perform rarefaction
out <- rarecurve(asv_abund_df, step=100, sample=raremax, label=FALSE)
# Extract Nmax and Smax for the plot ranges
Nmax <- sapply(out, function(x) max(attr(x, "Subsample")))
Smax <- sapply(out, max)
# plot
plot(c(1, max(Nmax)), c(1, max(Smax)), xlab = "Sample Read Depth",
ylab = "ASVs", type = "n")
abline(v = raremax)
for (i in seq_along(out)) {
N <- attr(out[[i]], "Subsample")
lines(N, out[[i]], col = cols[i])
}
#Rarefy to minimum depth
pseq_rarefy <- phyloseq::rarefy_even_depth(
pseq, sample.size = min(microbiome::readcount(pseq)),
rngseed = 1000
)
#Summarise and check sample counts
microbiome::summarize_phyloseq(pseq_rarefy)
microbiome::readcount(pseq_rarefy)
#Produce data frame of all alpha diversity values
alpha_df <- phyloseq::estimate_richness(physeq = pseq_rarefy)
head(alpha_df)
metadata <- sample_data(pseq_rarefy)
alpha_df1 <- cbind(metadata, alpha_df)
#Get averages and SDs for all treatments
alpha_summary <- alpha_df1 %>%
group_by(Rep, Microbiome, Agar) %>%
summarise(
Mean_Shannon = mean(Shannon),
SD_Shannon = sd(Shannon),
Mean_Chao1 = mean(Chao1),
SD_Chao1 = sd(Chao1),
Mean_Observed = mean(Observed),
SD_Observed = sd(Observed)
)
# Reverse alphabetic order for Microbiome
alpha_df1$Microbiome <- factor(alpha_df1$Microbiome, levels = rev(sort(unique(alpha_df1$Microbiome))))
# Alphabetical order for Agar
alpha_df1$Agar <- factor(alpha_df1$Agar, levels = sort(unique(alpha_df1$Agar)))
# Create a new ref_column using ifelse for each Microbiome
alpha_df1$ref_column <- NA
alpha_df1$ref_column <- ifelse(alpha_df1$Microbiome == "Palmaria", palmaria_ref,
ifelse(alpha_df1$Microbiome == "Calliblepharis", calli_ref,
ifelse(alpha_df1$Microbiome == "Ceramium", cera_ref,
ifelse(alpha_df1$Microbiome == "Lomentaria", lome_ref,
ifelse(alpha_df1$Microbiome == "Osmundea", osmu_ref,
ifelse(alpha_df1$Microbiome == "Chondrus", chon_ref, NA))))))
alpha_df1$Shannon <- as.numeric(as.character(alpha_df1$Shannon))
alpha_df1$ref_column <- as.numeric(as.character(alpha_df1$ref_column))
alpha_df1$shannon_sympatric<-(alpha_df1$Shannon/alpha_df1$ref_column)
sym_summary <- alpha_df1 %>%
group_by(Rep, Microbiome, Agar) %>%
summarise(
Mean_Shannon = mean(shannon_sympatric),
SD_Shannon = sd(shannon_sympatric),
n = n(),
se = SD_Shannon / sqrt(n)
)
#Scale to 0
sym_summary$scale <- (sym_summary$Mean_Shannon)-1
install.packages("ggtext")
library(ggtext)
sym_summary$Microbiome <- factor(
sym_summary$Microbiome,
levels = c("Calliblepharis", "Ceramium", "Chondrus", "Lomentaria", "Osmundea", "Palmaria")
)
custom_labels <- c(
Calliblepharis = "<b><i>Calliblepharis</i></b><br><b>microbiome</b>",
Ceramium = "<b><i>Ceramium</i></b><br><b>microbiome</b>",
Chondrus = "<b><i>Chondrus</i></b><br><b>microbiome</b>",
Lomentaria = "<b><i>Lomentaria</i></b><br><b>microbiome</b>",
Palmaria = "<b><i>Palmaria</i></b><br><b>microbiome</b>",
Osmundea = "<b><i>Osmundea</i></b><br><b>microbiome</b>"
)
comparisons_micro_cal <- list(
c("Calliblepharis", "Ceramium"),
c("Calliblepharis", "Chondrus"),
c("Calliblepharis", "Lomentaria"),
c("Calliblepharis", "Palmaria"),
c("Calliblepharis", "Osmundea")
)
comparisons_micro_lom <- list(
c("Lomentaria", "Osmundea")
)
comparisons_micro_pal <- list(
c("Palmaria", "Osmundea")
)
Fig5 <-ggplot(sym_summary, aes(x = Agar, y = scale, fill = Agar)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = scale - se, ymax = scale + se),
width = 0.2,
color = "black") +
facet_wrap(~ Microbiome, scales = "fixed", nrow = 1, labeller = as_labeller(custom_labels)) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
theme_bw() +
scale_fill_viridis_d(option = "D") +
labs(x = "Seaweed-Specific Medium Type", y = "Shannon Diversity Scaled to Sympatric Environment") +
geom_signif(comparisons = comparisons_micro_cal,
annotations = c("**", "**","***","***","***"),
y_position = c(-0.1,-0.17,-0.24,0.25,-0.31),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Calliblepharis"), tip_length = 0) +
geom_signif(comparisons = comparisons_micro_lom,
annotations = c("***"),
y_position = c(0.03),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Lomentaria"), tip_length = 0) +
geom_signif(comparisons = comparisons_micro_pal,
annotations = c("*"),
y_position = c(0.03),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Palmaria"), tip_length = 0) +
theme(
strip.text = element_markdown(size = 11),  # Ensures Markdown rendering in facet labels
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, face = "italic"),
axis.ticks.x = element_line(),
panel.spacing = unit(1, "lines"),
strip.background = element_rect(fill = "lightgrey"),
legend.title = element_blank(),
legend.position = "none",
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
)
# Save the arranged plot as a PNG
png("Figure5.png", width = 2500, height = 1500, res = 300)
grid.draw(Fig5)  # Draw the grob to the file
# Q-Q plot
qqnorm(residuals(cal_shan))
qqline(residuals(cal_shan), col = "blue")
#Test for homogeneity of variances
leveneTest(Shannon ~ Agar, data = df_cal)
plot(fitted(cal_shan), residuals(cal_shan))
abline(h = 0, col = "red")
####Ceramium###
df_cer$Agar <- relevel(df_cer$Agar, ref = "Ceramium")
cer_shan <- lm(Shannon ~ Agar, data = df_cer)
summary(cer_shan)
cer_shan_1 <- glht(cer_shan, linfct = mcp(Agar = "Dunnett"))
summary(cer_shan_1)
#Rarefy to minimum depth
pseq_rarefy <- phyloseq::rarefy_even_depth(
pseq, sample.size = min(microbiome::readcount(pseq)),
rngseed = 1000
)
#Summarise and check sample counts
microbiome::summarize_phyloseq(pseq_rarefy)
microbiome::readcount(pseq_rarefy)
#Produce data frame of all alpha diversity values
alpha_df <- phyloseq::estimate_richness(physeq = pseq_rarefy)
head(alpha_df)
metadata <- sample_data(pseq_rarefy)
alpha_df1 <- cbind(metadata, alpha_df)
#Get averages and SDs for all treatments
alpha_summary <- alpha_df1 %>%
group_by(Rep, Microbiome, Agar) %>%
summarise(
Mean_Shannon = mean(Shannon),
SD_Shannon = sd(Shannon),
Mean_Chao1 = mean(Chao1),
SD_Chao1 = sd(Chao1),
Mean_Observed = mean(Observed),
SD_Observed = sd(Observed)
)
# Reverse alphabetic order for Microbiome
alpha_df1$Microbiome <- factor(alpha_df1$Microbiome, levels = rev(sort(unique(alpha_df1$Microbiome))))
# Alphabetical order for Agar
alpha_df1$Agar <- factor(alpha_df1$Agar, levels = sort(unique(alpha_df1$Agar)))
# Create a new ref_column using ifelse for each Microbiome
alpha_df1$ref_column <- NA
alpha_df1$ref_column <- ifelse(alpha_df1$Microbiome == "Palmaria", palmaria_ref,
ifelse(alpha_df1$Microbiome == "Calliblepharis", calli_ref,
ifelse(alpha_df1$Microbiome == "Ceramium", cera_ref,
ifelse(alpha_df1$Microbiome == "Lomentaria", lome_ref,
ifelse(alpha_df1$Microbiome == "Osmundea", osmu_ref,
ifelse(alpha_df1$Microbiome == "Chondrus", chon_ref, NA))))))
#Scale by sympatric environment
# Create the reference values
palmaria_ref <- alpha_summary[alpha_summary$Microbiome == "Palmaria" & alpha_summary$Agar == "Palmaria", "Mean_Shannon"]
calli_ref <- alpha_summary[alpha_summary$Microbiome == "Calliblepharis" & alpha_summary$Agar == "Calliblepharis", "Mean_Shannon"]
cera_ref <- alpha_summary[alpha_summary$Microbiome == "Ceramium" & alpha_summary$Agar == "Ceramium", "Mean_Shannon"]
lome_ref <- alpha_summary[alpha_summary$Microbiome == "Lomentaria" & alpha_summary$Agar == "Lomentaria", "Mean_Shannon"]
osmu_ref <- alpha_summary[alpha_summary$Microbiome == "Osmundea" & alpha_summary$Agar == "Osmundea", "Mean_Shannon"]
chon_ref <- alpha_summary[alpha_summary$Microbiome == "Chondrus" & alpha_summary$Agar == "Chondrus", "Mean_Shannon"]
# Create a new ref_column using ifelse for each Microbiome
alpha_summary$ref_column <- NA
alpha_summary$ref_column <- ifelse(alpha_summary$Microbiome == "Palmaria", palmaria_ref,
ifelse(alpha_summary$Microbiome == "Calliblepharis", calli_ref,
ifelse(alpha_summary$Microbiome == "Ceramium", cera_ref,
ifelse(alpha_summary$Microbiome == "Lomentaria", lome_ref,
ifelse(alpha_summary$Microbiome == "Osmundea", osmu_ref,
ifelse(alpha_summary$Microbiome == "Chondrus", chon_ref, NA))))))
alpha_df1$Shannon <- as.numeric(as.character(alpha_df1$Shannon))
alpha_df1$ref_column <- as.numeric(as.character(alpha_df1$ref_column))
alpha_df1$shannon_sympatric<-(alpha_df1$Shannon/alpha_df1$ref_column)
sym_summary <- alpha_df1 %>%
group_by(Rep, Microbiome, Agar) %>%
summarise(
Mean_Shannon = mean(shannon_sympatric),
SD_Shannon = sd(shannon_sympatric),
n = n(),
se = SD_Shannon / sqrt(n)
)
#Scale to 0
sym_summary$scale <- (sym_summary$Mean_Shannon)-1
install.packages("ggtext")
install.packages("ggtext")
library(ggtext)
sym_summary$Microbiome <- factor(
sym_summary$Microbiome,
levels = c("Calliblepharis", "Ceramium", "Chondrus", "Lomentaria", "Osmundea", "Palmaria")
)
custom_labels <- c(
Calliblepharis = "<b><i>Calliblepharis</i></b><br><b>microbiome</b>",
Ceramium = "<b><i>Ceramium</i></b><br><b>microbiome</b>",
Chondrus = "<b><i>Chondrus</i></b><br><b>microbiome</b>",
Lomentaria = "<b><i>Lomentaria</i></b><br><b>microbiome</b>",
Palmaria = "<b><i>Palmaria</i></b><br><b>microbiome</b>",
Osmundea = "<b><i>Osmundea</i></b><br><b>microbiome</b>"
)
comparisons_micro_cal <- list(
c("Calliblepharis", "Ceramium"),
c("Calliblepharis", "Chondrus"),
c("Calliblepharis", "Lomentaria"),
c("Calliblepharis", "Palmaria"),
c("Calliblepharis", "Osmundea")
)
comparisons_micro_lom <- list(
c("Lomentaria", "Osmundea")
)
comparisons_micro_pal <- list(
c("Palmaria", "Osmundea")
)
Fig5 <-ggplot(sym_summary, aes(x = Agar, y = scale, fill = Agar)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = scale - se, ymax = scale + se),
width = 0.2,
color = "black") +
facet_wrap(~ Microbiome, scales = "fixed", nrow = 1, labeller = as_labeller(custom_labels)) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
theme_bw() +
scale_fill_viridis_d(option = "D") +
labs(x = "Seaweed-Specific Medium Type", y = "Shannon Diversity Scaled to Sympatric Environment") +
geom_signif(comparisons = comparisons_micro_cal,
annotations = c("**", "**","***","***","***"),
y_position = c(-0.1,-0.17,-0.24,0.25,-0.31),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Calliblepharis"), tip_length = 0) +
geom_signif(comparisons = comparisons_micro_lom,
annotations = c("***"),
y_position = c(0.03),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Lomentaria"), tip_length = 0) +
geom_signif(comparisons = comparisons_micro_pal,
annotations = c("*"),
y_position = c(0.03),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Palmaria"), tip_length = 0) +
theme(
strip.text = element_markdown(size = 11),  # Ensures Markdown rendering in facet labels
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, face = "italic"),
axis.ticks.x = element_line(),
panel.spacing = unit(1, "lines"),
strip.background = element_rect(fill = "lightgrey"),
legend.title = element_blank(),
legend.position = "none",
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
)
Fig5
Fig5 <-ggplot(sym_summary, aes(x = Agar, y = scale, fill = Agar)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = scale - se, ymax = scale + se),
width = 0.2,
color = "black") +
facet_wrap(~ Microbiome, scales = "fixed", nrow = 1, labeller = as_labeller(custom_labels)) +
geom_hline(yintercept = 0, color = "black", linetype = "dashed") +
theme_bw() +
scale_fill_viridis_d(option = "D") +
labs(x = "Seaweed-Specific Medium Type", y = "Shannon Diversity Scaled to Sympatric Environment") +
geom_signif(comparisons = comparisons_micro_cal,
annotations = c("**", "**","***","***","***"),
y_position = c(-0.1,-0.17,-0.24,0.25,-0.31),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Calliblepharis"), tip_length = 0) +
geom_signif(comparisons = comparisons_micro_lom,
annotations = c("***"),
y_position = c(0.03),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Lomentaria"), tip_length = 0) +
geom_signif(comparisons = comparisons_micro_pal,
annotations = c("*"),
y_position = c(0.03),
textsize = 4, data = sym_summary %>% filter(Microbiome == "Palmaria"), tip_length = 0) +
theme(
strip.text = element_markdown(size = 11),  # Ensures Markdown rendering in facet labels
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, face = "italic"),
axis.ticks.x = element_line(),
panel.spacing = unit(1, "lines"),
strip.background = element_rect(fill = "lightgrey"),
legend.title = element_blank(),
legend.position = "none",
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
)
Fig5
# Save the arranged plot as a PNG
png("Figure5.png", width = 2500, height = 1500, res = 300)
grid.draw(Fig5)  # Draw the grob to the file
dev.off()
#Load the packages/libraries required
library("qiime2R")
library("vegan")
library("ggplot2")
library("phyloseq")
library("microbiome")
library("dplyr")
library("tidyr")
library("viridis")
library("car")
library("ggsignif")
library("multcomp")
####Import data####
pseq_with_blanks <- qiime2R::qza_to_phyloseq(
features = "table-with-phylum.qza",
tree = "rooted-tree.qza",
taxonomy = "taxonomy.sklearn.qza",
metadata = "Metadata.txt"
)
#Filter out blank samples
sample_data(pseq_with_blanks)
pseq <- subset_samples(pseq_with_blanks, Rep != "Blank")
#Extract ASV table as data frame
asv_abund_df <- as.data.frame(t(phyloseq::otu_table(pseq)))
# Minimum sample count to be rarefied
raremax <- min(microbiome::readcount(pseq))
# Define colors for the plot
col <- c("darkred", "forestgreen", "hotpink", "blue", "orange", "black")
set.seed(3)
grp <- factor(sample(seq_along(col), nrow(asv_abund_df), replace = TRUE))
cols <- col[grp]
# Perform rarefaction
out <- rarecurve(asv_abund_df, step=100, sample=raremax, label=FALSE)
# Extract Nmax and Smax for the plot ranges
Nmax <- sapply(out, function(x) max(attr(x, "Subsample")))
Smax <- sapply(out, max)
# plot
plot(c(1, max(Nmax)), c(1, max(Smax)), xlab = "Sample Read Depth",
ylab = "ASVs", type = "n")
abline(v = raremax)
for (i in seq_along(out)) {
N <- attr(out[[i]], "Subsample")
lines(N, out[[i]], col = cols[i])
}
#Rarefy to minimum depth
pseq_rarefy <- phyloseq::rarefy_even_depth(
pseq, sample.size = min(microbiome::readcount(pseq)),
rngseed = 1000
)
#Summarise and check sample counts
microbiome::summarize_phyloseq(pseq_rarefy)
microbiome::readcount(pseq_rarefy)
#Extract ASV table as data frame
asv_abund_df <- as.data.frame(t(phyloseq::otu_table(pseq)))
# Minimum sample count to be rarefied
raremax <- min(microbiome::readcount(pseq))
# Define colors for the plot
col <- c("darkred", "forestgreen", "hotpink", "blue", "orange", "black")
set.seed(3)
grp <- factor(sample(seq_along(col), nrow(asv_abund_df), replace = TRUE))
cols <- col[grp]
# Perform rarefaction
out <- rarecurve(asv_abund_df, step=100, sample=raremax, label=FALSE)
# Extract Nmax and Smax for the plot ranges
Nmax <- sapply(out, function(x) max(attr(x, "Subsample")))
Smax <- sapply(out, max)
# plot
plot(c(1, max(Nmax)), c(1, max(Smax)), xlab = "Sample Read Depth",
ylab = "ASVs", type = "n")
abline(v = raremax)
for (i in seq_along(out)) {
N <- attr(out[[i]], "Subsample")
lines(N, out[[i]], col = cols[i])
}
#Rarefy to minimum depth
pseq_rarefy <- phyloseq::rarefy_even_depth(
pseq, sample.size = min(microbiome::readcount(pseq)),
rngseed = 1000
)
